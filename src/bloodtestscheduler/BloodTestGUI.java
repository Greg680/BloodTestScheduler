/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bloodtestscheduler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Greg
 */
public class BloodTestGUI extends javax.swing.JFrame {
    String name, GPname, hospitalward;
    int age, priority;
    ArrayList<Patient> Patients;
    PQList PriorityQ;
    StackAbsence stack;
    
    /**
     * Creates new form BloodTestGUI
     */
    public BloodTestGUI() {
        initComponents();
        Patients = new ArrayList<>();
        PriorityQ = new PQList();
        stack = new StackAbsence();
        LoadPatientData();
        LoadPatientPQ();
        LoadStack();
        
    }
    
    private void LoadPatientData(){
        File f;
            FileInputStream fStream;
            ObjectInputStream oStream;
            try{
                f = new File ("pat.dat");
                fStream = new FileInputStream(f);
                oStream = new ObjectInputStream(fStream);
                Patients = (ArrayList<Patient>)oStream.readObject();
                oStream.close();
                System.out.println("added to file succesdfully");
            }catch(IOException | ClassNotFoundException e){
                System.out.println(e);
        }
    }
    
    private void LoadPatientPQ(){
        File f;
            FileInputStream fStream;
            ObjectInputStream oStream;
            try{
                f = new File ("sortedpat.dat");
                fStream = new FileInputStream(f);
                oStream = new ObjectInputStream(fStream);
                PriorityQ = (PQList)oStream.readObject();
                oStream.close(); 
                System.out.println("added to file succesdfully");
            }catch(IOException | ClassNotFoundException e){
                System.out.println(e);
        }
    }
    private void LoadStack(){
        File f;
            FileInputStream fStream;
            ObjectInputStream oStream;
            try{
                f = new File ("stackpat.dat");
                fStream = new FileInputStream(f);
                oStream = new ObjectInputStream(fStream);
                stack = (StackAbsence)oStream.readObject();
                oStream.close(); 
                System.out.println("added to file succesdfully");
            }catch(IOException | ClassNotFoundException e){
                System.out.println(e);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTA = new javax.swing.JTextArea();
        NameTF = new javax.swing.JTextField();
        AgeTF = new javax.swing.JTextField();
        GPDetailsTF = new javax.swing.JTextField();
        PriorityTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AddBTN = new javax.swing.JButton();
        DispPatientBTN = new javax.swing.JButton();
        PatientAbsentBTN = new javax.swing.JButton();
        DispPatientAbsentBTN = new javax.swing.JButton();
        ProcessPatientBTN = new javax.swing.JButton();
        HwardCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        OutputTA.setColumns(20);
        OutputTA.setRows(5);
        jScrollPane1.setViewportView(OutputTA);

        NameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameTFActionPerformed(evt);
            }
        });

        AgeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgeTFActionPerformed(evt);
            }
        });

        GPDetailsTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GPDetailsTFActionPerformed(evt);
            }
        });

        PriorityTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriorityTFActionPerformed(evt);
            }
        });

        jLabel1.setText("Name:");

        jLabel2.setText("Age:");

        jLabel3.setText("GP details:");

        jLabel4.setText("Priority:");

        jLabel5.setText("Urgent, Medium, Low");

        AddBTN.setText("Add Patient");
        AddBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBTNActionPerformed(evt);
            }
        });

        DispPatientBTN.setText("Display Patients");
        DispPatientBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispPatientBTNActionPerformed(evt);
            }
        });

        PatientAbsentBTN.setText("Patient Absent");
        PatientAbsentBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatientAbsentBTNActionPerformed(evt);
            }
        });

        DispPatientAbsentBTN.setText("Display Absent Patients");
        DispPatientAbsentBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispPatientAbsentBTNActionPerformed(evt);
            }
        });

        ProcessPatientBTN.setText("Process Next Patient");
        ProcessPatientBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessPatientBTNActionPerformed(evt);
            }
        });

        HwardCheck.setText("Hospital Ward");
        HwardCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HwardCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(PatientAbsentBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(GPDetailsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(NameTF)
                                    .addComponent(AgeTF, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PriorityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(HwardCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(ProcessPatientBTN)
                                    .addComponent(DispPatientAbsentBTN))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AddBTN, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DispPatientBTN, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(jScrollPane1))))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AgeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GPDetailsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PriorityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddBTN)
                            .addComponent(DispPatientAbsentBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProcessPatientBTN, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DispPatientBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PatientAbsentBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(HwardCheck)))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameTFActionPerformed

    private void AgeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AgeTFActionPerformed

    private void GPDetailsTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GPDetailsTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GPDetailsTFActionPerformed

    private void PriorityTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriorityTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PriorityTFActionPerformed

    private void DispPatientAbsentBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispPatientAbsentBTNActionPerformed
        // TODO add your handling code here:
        if(stack.isEmpty()){
            OutputTA.setText("no patients in queue");
        }else {
            OutputTA.setText(stack.displayStack());
        }
            
    }//GEN-LAST:event_DispPatientAbsentBTNActionPerformed

    private void AddBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBTNActionPerformed
        // TODO add your handling code here:
        if(NameTF.getText().isEmpty()){
            OutputTA.setText("dont leave name empty");
        }else if(AgeTF.getText().isEmpty()){
            OutputTA.setText("dont leave age empty");
        }else if(PriorityTF.getText().isEmpty()){
            OutputTA.setText("dont leave priority empty");
        }else{
            name = NameTF.getText();
            GPname = GPDetailsTF.getText();
            age = Integer.parseInt(AgeTF.getText());
            
            if(PriorityTF.getText().toLowerCase().equals("urgent")){
                priority = 1;
            } else if(PriorityTF.getText().toLowerCase().equals("medium")){
                priority = 2;
            } else {
                priority = 3;
            }
            
            if(HwardCheck.isSelected()){
                hospitalward = "attending";
            } else {
                hospitalward = "not attending";
            }
            
            Patient addPat = new Patient(name, GPname, age, priority, hospitalward);
            Patients.add(addPat);
            
            PriorityQ.enqueue(addPat);
            System.out.println(addPat.printPatient());
            
            OutputTA.setText(addPat.printPatient());
            
            SortSave();
            
            File f;
            FileOutputStream fStream;
            ObjectOutputStream oStream;
            try{
                f = new File ("pat.dat");
                fStream = new FileOutputStream(f);
                oStream = new ObjectOutputStream(fStream);
                oStream.writeObject(Patients);
                oStream.close();
                System.out.println("added to file succesdfully");
            }catch(IOException e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_AddBTNActionPerformed

    
    private void DispPatientBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispPatientBTNActionPerformed
        // TODO add your handling code here:
       if(PriorityQ.isEmpty()){
            OutputTA.setText("empty Queue please add users to display");
        }else{
           PriorityQ.PrioritySort();
           OutputTA.setText(PriorityQ.print());
       }
    }//GEN-LAST:event_DispPatientBTNActionPerformed

    private void SortSave(){
        PriorityQ.PrioritySort();
        OutputTA.setText(PriorityQ.print());
        
        File f;
            FileOutputStream fStream;
            ObjectOutputStream oStream;
            try{
                f = new File ("sortedpat.dat");
                fStream = new FileOutputStream(f);
                oStream = new ObjectOutputStream(fStream);
                oStream.writeObject(PriorityQ);
                oStream.close();
                System.out.println("added to file succesdfully");
            }catch(IOException e){
                System.out.println(e);
            }
    }
    private void PatientAbsentBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatientAbsentBTNActionPerformed
        // TODO add your handling code here:
        if(PriorityQ.isEmpty()){
            OutputTA.setText("empty Queue please add users to remove");
        }else{
            Patient patientpop = PriorityQ.dequeue();
            OutputTA.setText("absent patient " +patientpop.printPatient());
            Patients.remove(patientpop);
            
            stack.push(patientpop);
            File f;
            FileOutputStream fStream;
            ObjectOutputStream oStream;
            try{
                f = new File("stackpat.dat");
                fStream = new FileOutputStream(f);
                oStream = new ObjectOutputStream(fStream);
                oStream.writeObject(stack);
                oStream.close();
            }catch(IOException e){
                System.out.println(e);
            }
            SortSave();
        }
            
    }//GEN-LAST:event_PatientAbsentBTNActionPerformed

    private void ProcessPatientBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessPatientBTNActionPerformed
        // TODO add your handling code here:
        if(PriorityQ.isEmpty()){
            OutputTA.setText("empty Queue please add users to remove");
        }else{
            Patient patientpop = PriorityQ.dequeue();
            System.out.println(patientpop.printPatient());
            JOptionPane.showMessageDialog(null,"patient has been processed:" + patientpop.printPatient());
            Patients.remove(patientpop);
            
            SortSave();
        }
            
    }//GEN-LAST:event_ProcessPatientBTNActionPerformed

    private void HwardCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HwardCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HwardCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BloodTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BloodTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BloodTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BloodTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BloodTestGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBTN;
    private javax.swing.JTextField AgeTF;
    private javax.swing.JButton DispPatientAbsentBTN;
    private javax.swing.JButton DispPatientBTN;
    private javax.swing.JTextField GPDetailsTF;
    private javax.swing.JCheckBox HwardCheck;
    private javax.swing.JTextField NameTF;
    private javax.swing.JTextArea OutputTA;
    private javax.swing.JButton PatientAbsentBTN;
    private javax.swing.JTextField PriorityTF;
    private javax.swing.JButton ProcessPatientBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
